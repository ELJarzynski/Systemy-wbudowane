//
//PIC24FJ128GA010 Configuration Bit Settings
// For more on Configuration Bits, see Section 1.1
// consult your device data sheet
// CONFIG2
#pragma config POSCMOD = XT // XT Oscillator mode selected
#pragma config OSCIOFNC = ON // OSC2/CLKO/RC15 as port I/O (RC15)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor disabled
#pragma config FNOSC = PRI // Primary Oscillator (XT, HS, EC)
#pragma config IESO = ON // Int Ext Switch Over Mode enabled
// CONFIG1
#pragma config WDTPS = PS32768 // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128 // WDT Prescaler (1:128)
#pragma config WINDIS = ON // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF // Watchdog Timer disabled
#pragma config ICS = PGx2 //
//Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF // Writes to program memory allowed
#pragma config GCP = OFF // Code protection is disabled
#pragma config JTAGEN = OFF // JTAG port is disabled
// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#include <xc.h>
#include <libpic30.h>

////    Zadanie 1 **************************************************************
//int main(void) {
//    unsigned char portValue;
//    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
//    TRISA = 0x0000; // set all port bits to be output
//    while(1) 
//    {
//         portValue += 1;
//        LATA = portValue;
//        __delay32(4000000);
//    }
//    return -1;
//}
    
////    Zadanie 2 **************************************************************
//int main(void) {
//    unsigned char portValue;
//    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
//    TRISA = 0x0000; // set all port bits to be output
//    while(1) 
//    {
//        LATA = portValue;
//        __delay32(4000000);
//        portValue -= 1;
//    } 
//    return -1;
//}
    
////Zadanie 3 **************************************************************
//int main(void) {
//    unsigned char portValue = 0;
//    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
//    TRISA = 0x0000; // set all port bits to be output
//
//    while(1) {
//        LATA = (portValue >> 1) ^ portValue;
//        __delay32(4000000);
//        portValue += 1;
//        if (portValue > 255) {
//            portValue = 0;
//        }
//    }
//    return -1;
//}

////Zadanie 4 **************************************************************
//int main(void) {
//    unsigned char portValue = 255;
//    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
//    TRISA = 0x0000; // set all port bits to be output
//
//    while(1) {
//        LATA = (portValue >> 1) ^ portValue;
//        __delay32(4000000);
//        portValue -= 1;
//        if (portValue < 0) {
//            portValue = 255;
//        }
//    }
//    return -1;
//}

//Zadanie 7 **************************************************************
int main(void) {
    unsigned char portValue = 7;
    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
    TRISA = 0x0000; // set all port bits to be output

    while(1) {
        LATA = portValue;
        __delay32(4000000);
        
        if(portValue == 224)
            portValue = portValue >> 1;
        if(portValue == 7)
            portValue = portValue << 1;
        
        
    }
    return -1;
}
