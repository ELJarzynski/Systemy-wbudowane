#pragma config POSCMOD = XT // XT Oscillator mode selected
#pragma config OSCIOFNC = ON // OSC2/CLKO/RC15 as port I/O (RC15)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor disabled
#pragma config FNOSC = PRI // Primary Oscillator (XT, HS, EC)
#pragma config IESO = ON // Int Ext Switch Over Mode enabled
// CONFIG1
#pragma config WDTPS = PS32768 // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128 // WDT Prescaler (1:128)
#pragma config WINDIS = ON // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF // Watchdog Timer disabled
#pragma config ICS = PGx2 // Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF // Writes to program memory allowed
#pragma config GCP = OFF // Code protection is disabled
#pragma config JTAGEN = OFF // JTAG port is disabled
// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#include <xc.h>
#include <libpic30.h>
#include "buttons.h"
#include "adc.h"


int main(void) {
    unsigned char portValue;
    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
    TRISA = 0x0000; // set all port bits to be output

    // Domy?lna konfiguracja ADC
    ADC_SetConfiguration(ADC_CONFIGURATION_DEFAULT);
    // ADC ma czyta? potencjometr
    ADC_ChannelEnable(ADC_CHANNEL_POTENTIOMETER);
    
    // output LEDÃ³w PORT A
    TRISA = 0x0000;
    unsigned int value;
    while (1)
    {
        start:
        __delay32(15000);
        LATA = 0b0;
        // Czytanie 10-bit warto?ci z potencjometru
        value = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
        // B??d?
        if (value == 0xFFFF) {
            // W razie czego przechodzimy do kolejnej iteracji
            continue;
        }
        // normalizacja zakresu do 0-255
        unsigned char normalizedValue = value >> 2;
        
        if(normalizedValue > 255/2){
            for(int i = 0; i < 6; i++){
                LATA = 0b0001;
                __delay32(2000000);
                LATA = 0;
                __delay32(2000000);
                value = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
                unsigned char normalizedValue = value >> 2;
                if(normalizedValue < 255/2 || BUTTON_IsPressed ( BUTTON_S3 ) == true){
                goto start;
                }
            }
            __delay32(150000);
            while(1){
                LATA = 0b11111111;
                
                value = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
                unsigned char normalizedValue = value >> 2;
                if(normalizedValue < 255/2  || BUTTON_IsPressed ( BUTTON_S3 ) == true){
                goto start;
                }
            }
        }
    }
    return 0;

}
