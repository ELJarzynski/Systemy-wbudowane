// PIC24FJ128GA010 Configuration Bit Settings
// For more on Configuration Bits, see Section 1.1
// consult your device data sheet
// CONFIG2
#pragma config POSCMOD = XT // XT Oscillator mode selected
#pragma config OSCIOFNC = ON // OSC2/CLKO/RC15 as port I/O (RC15)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor disabled
#pragma config FNOSC = PRI // Primary Oscillator (XT, HS, EC)
#pragma config IESO = ON // Int Ext Switch Over Mode enabled
// CONFIG1
#pragma config WDTPS = PS32768 // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128 // WDT Prescaler (1:128)
#pragma config WINDIS = ON // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF // Watchdog Timer disabled
#pragma config ICS = PGx2 // Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF // Writes to program memory allowed
#pragma config GCP = OFF // Code protection is disabled
#pragma config JTAGEN = OFF // JTAG port is disabled
// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#include <xc.h>
#include <libpic30.h>
#include "buttons.h"



int main(void) {
    AD1PCFG = 0xFFFF;
    TRISA = 0x0000;
    char currentProgram = 0b00000001;
    while(1){
        if(BUTTON_IsPressed (BUTTON_S3) == true){
            currentProgram--;
            if(currentProgram == 0b00000000) currentProgram = 0b00001001;
            __delay32(1000000);
        } else if(BUTTON_IsPressed (BUTTON_S4) == true){
            currentProgram++;
            if(currentProgram == 0b00001010) currentProgram = 0b00000001;
            __delay32(1000000);
        }
        switch(currentProgram) {
            case 1:
                zadanie1();
                break;
            case 2:
                zadanie2();
                break;
            case 3:
                zadanie3();
                break;
            case 4:
                zadanie4();
                break;
            case 5:
                zadanie5();
                break;
            case 6:
                zadanie6();
                break;
            case 7:
                zadanie7();
                break;
            case 8:
                zadanie8();
                break;      
        }
    }
}


// Zadanie 1
    void zadanie1() {
        unsigned char portValue = 0;
        char currentS6 = 0, currentS7 = 0, prevS6 = 0, prevS7 = 0;
        TRISA = 0x0000; 
        TRISD = 0xFFFF; 

        while(1) {
            LATA = portValue;
            prevS6 = PORTDbits.RD6;
            prevS7 = PORTDbits.RD7;
            __delay32(15000);
            char currentS6 = PORTDbits.RD6;
            char currentS7 = PORTDbits.RD7;

            if(currentS6 - prevS6 == 1){
                portValue++;
            }
            if(currentS7 - prevS7 == 1){
                portValue--;
            }
        }
    }

// Zadanie 2
    void zadanie2() {
        unsigned char portValue;
        unsigned char gray;
        AD1PCFG = 0xFFFF; 
        TRISA = 0x0000; 

        while(1) {
            gray = portValue ^ (portValue/2);
            portValue += 1;
            LATA = gray;
            __delay32(5000000);
        } 
    }

// Zadanie 3
    void zadanie3() {
        unsigned char portValue = 255;
        unsigned char gray;
        AD1PCFG = 0xFFFF; 
        TRISA = 0x0000; 

        while(1) {
            gray = portValue ^ (portValue/2);
            portValue--;
            LATA = gray;
            __delay32(5000000);
        }
    }

// Zadanie 4
    void zadanie4() {
        unsigned char portValue;
        unsigned char bcd;
        AD1PCFG = 0xFFFF; 
        TRISA = 0x0000; 

        while(1){
            bcd = (((portValue/10) << 4) | (portValue % 10));
            portValue++;
            LATA = bcd;
            __delay32(5000000);
        }
    }

// Zadanie 5
    void zadanie5() {
        unsigned char portValue = 99;
        unsigned char bcd;
        AD1PCFG = 0xFFFF; 
        TRISA = 0x0000; 

        while(1){
            bcd = (((portValue/10) << 4) | (portValue % 10));
            portValue--;
            LATA = bcd;
            __delay32(5000000);
        }
    }

// Zadanie 6
    void zadanie6() {
        unsigned char portValue;
        unsigned char snake = 0b0000111;
        AD1PCFG = 0xFFFF;
        TRISA = 0x0000;

        while (1) {
            while (snake != 0b11100000) {
                LATA = snake;
                snake <<=1;
                __delay32 (1000000) ;
            }
            while (snake != 0b00000011) {
                LATA = snake;
                snake >>=1;
                __delay32 (1000000) ;
            }
        }
    }

// Zadanie 7
    void zadanie7() {
        unsigned char portValue;
        unsigned char value = 0;
        AD1PCFG = 0xFFFF;
        TRISA = 0x0000;

        for (int i = 0; i < 8; i++) {
            unsigned char temp = 1;
            for(int j = i + 1; j < 8; j++){
                LATA = value + temp;
                temp <<=1;
                __delay32 (1000000);
            }
            LATA = (value + temp);
            value += temp;
            __delay32 (10000000);
        }
    }

// Zadanie 8
    void zadanie8() {
        unsigned char portValue;
        unsigned char seed = 0b1110011; 
        AD1PCFG = 0xFFFF;
        TRISA = 0x0000;

        while(1){
            for (int i = 0; i < 10; ++i) {
                seed = (((seed & (1 << 6)) ^ (seed & (1 << 5)) ^
                         (seed & (1 << 4)) ^ (seed & (1 << 1)) ^ (seed & 1)) << 6) | (seed >> 1);
                LATA = seed & 0b00111111; 
                __delay32 (10000000);
            }
        }
    }


//int main(void) {
//    unsigned char portValue = 0;
//    char currentS6 = 0, currentS7 = 0, prevS6 = 0, prevS7 = 0;
//    TRISA = 0x0000; 
//    TRISD = 0xFFFF; 
//
//    while(1) {
//        LATA = portValue;
//        prevS6 = PORTDbits.RD6;
//        prevS7 = PORTDbits.RD7;
//       __delay32(15000);
//        char currentS6 = PORTDbits.RD6;
//        char currentS7 = PORTDbits.RD7;
//       
//        if(currentS6 - prevS6 == 1){
//            portValue++;
//        }
//        if(currentS7 - prevS7 == 1){
//            portValue--;
//        }
//    }
//    return 0;
//}
//int main(void){
//    unsigned char portValue;
//    unsigned char gray;
//    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
//    TRISA = 0x0000; // set all port bits to be output
//
//    while(1) {
//        gray = portValue ^ (portValue/2);
//        portValue += 1;
//        LATA = gray;
//        __delay32(5000000);
//    } 
//    return -1;
//}

//int main(void){
//    unsigned char portValue = 255;
//    unsigned char gray;
//    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
//    TRISA = 0x0000; // set all port bits to be output
//    while(1) {
//        gray = portValue ^ (portValue/2);
//       portValue --;
//       LATA = gray;
//        __delay32(5000000);
//    }
//    return -1;
//}

//int main(void){
//    unsigned char portValue;
//    unsigned char bcd;
//    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
//    TRISA = 0x0000; // set all port bits to be output
//    
//    while(1){
//        bcd = (((portValue/10) << 4) | (portValue % 10));
//        portValue ++;
//      LATA = bcd;
//        __delay32(5000000);
//    }
//   return -1;
//}


//int main(void){
//    unsigned char portValue = 99;
//   unsigned char bcd;
//    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
//    TRISA = 0x0000; // set all port bits to be output
//    
//    while(1){
//        bcd = (((portValue/10) << 4) | (portValue % 10));
//        portValue --;
//       LATA = bcd;
//        __delay32(5000000);
//   }
//    return -1;
//}

//zadanie 7

//int main(void) {
//    unsigned char portValue;
//    unsigned char snake = 0b0000111;
//    AD1PCFG = 0xFFFF;
//    TRISA = 0x0000;
//        while (1) {
//            while (snake != 0b11100000) {
//                LATA = snake;
//                snake <<=1;
//                __delay32 (1000000) ;
//        }
//            while (snake != 0b00000011) {
//                LATA = snake;
//                snake >>=1;
//                __delay32 (1000000) ;
//            }
//        }
//    return -1;
//}
//zadanie 8
//int main(void) {
//    unsigned char portValue;
//    unsigned char value = 0;
//    AD1PCFG = 0xFFFF;
//   TRISA = 0x0000;
//    for (int i = 0; i < 8; i++) {
//        unsigned char temp = 1;
//    for(int j = i + 1; j < 8; j++){
//        LATA = value + temp;
//        temp <<=1;
//        __delay32 (1000000);
//    }
//    LATA = (value + temp);
//    value += temp;
//    __delay32 (10000000);
//    }
//}

//zadanie 9
//int main(void) {
//   unsigned char portValue;
//   unsigned char seed = 0b1110011; 
//   AD1PCFG = 0xFFFF;
//   TRISA = 0x0000;
//   while(1){
//        for (int i = 0; i < 10; ++i) {
//            seed = (((seed & (1 << 6)) ^ (seed & (1 << 5)) ^
//                    (seed & (1 << 4)) ^ (seed & (1 << 1)) ^ (seed & 1)) << 6) | (seed >> 1);
//            LATA = seed & 0b00111111; 
//            __delay32 (10000000);
//        }
//    }
//   return -1;
//}
